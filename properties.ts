import { Property } from './types'

const addDirections = (name: string, abbreviation: string, defaultValue = undefined) => ({
  [name]: [name, defaultValue],
  [abbreviation]: name,
  [`${name}Top`]: [`${name}Top`, defaultValue],
  [`${abbreviation}t`]: `${name}Top`,
  [`${name}Bottom`]: [`${name}Bottom`, defaultValue],
  [`${abbreviation}b`]: `${name}Bottom`,
  [`${name}Left`]: [`${name}Left`, defaultValue],
  [`${abbreviation}l`]: `${name}Left`,
  [`${name}Right`]: [`${name}Right`, defaultValue],
  [`${abbreviation}r`]: `${name}Right`,
})

const addAxes = (name: string, abbreviation: string, defaultValue = undefined) => ({
  [`${name}Vertical`]: ['paddingVertical', defaultValue],
  [`${abbreviation}v`]: `${name}Vertical`,
  [`${name}Horizontal`]: ['paddingHorizontal', defaultValue],
  [`${abbreviation}h`]: `${name}Horizontal`,
})

export const getProperties: () => { [key: string]: Property } = () => ({
  justifyContent: ['justifyContent', 'center'],
  centerHorizontal: 'justifyContent-center',
  centerVertical: 'alignItems-center',
  jc: 'justifyContent-center',
  between: 'justifyContent-space-between',
  alignItems: ['alignItems', 'center'],
  items: 'alignItems',
  alignContent: ['alignContent', 'normal'],
  align: 'alignContent',
  display: ['display', 'flex'],
  flex: 'display',
  df: 'display',
  flexDirection: ['flexDirection', 'row'],
  row: 'flexDirection-row',
  column: 'flexDirection-column',
  direction: 'flexDirection',
  flexWrap: ['flexWrap', 'wrap'], // nowrap is the default.
  wrap: 'flexWrap',
  gap: ['gap', 'medium'],
  space: 'gap',
  columnGap: ['columnGap'],
  rowGap: ['rowGap'],
  order: ['order'],
  flexGrow: ['flexGrow', 0],
  grow: 'flexGrow',
  flexShrink: ['flexShrink', 1],
  shrink: 'flexShrink',
  flexBasis: ['flexBasis', 'auto'],
  basis: 'flexBasis',
  alignSelf: ['alignSelf', 'auto'],
  self: 'alignSelf',
  borderRadius: ['borderRadius', 'medium'],
  radius: 'borderRadius',
  borderTopLeftRadius: ['borderTopLeftRadius', 'medium'],
  borderTopRightRadius: ['borderTopRightRadius', 'medium'],
  borderBottomLeftRadius: ['borderBottomLeftRadius', 'medium'],
  borderBottomRightRadius: ['borderBottomRightRadius', 'medium'],
  rounded: 'borderRadius',
  background: ['background'],
  bg: 'background',
  backgroundColor: ['backgroundColor'],
  color: ['color'],
  width: ['width'],
  w: 'width',
  fullWidth: ['width', '100%'],
  maxWidth: ['max-width'],
  maxW: 'maxWidth',
  height: ['height'],
  h: 'height',
  fullHeight: ['height', '100%'],
  maxHeight: ['max-width'],
  maxH: 'maxWidth',
  ...addDirections('padding', 'p'),
  ...addAxes('padding', 'p'),
  ...addDirections('margin', 'm'),
  ...addAxes('margin', 'm'),
  ...addDirections('border', 'b', 'none'),
  ...addAxes('border', 'b', 'none'),
  textAlign: ['textAlign', 'center'],
  text: 'textAlign',
  fontFamily: ['fontFamily', 'sans-serif'],
  font: 'fontFamily',
  mono: 'fontFamily-monospace',
  serif: 'fontFamily-serif',
  sansSerif: 'fontFamily',
  sans: 'fontFamily',
  fontWeight: ['fontWeight', 'normal'],
  fontSize: ['fontSize', 'medium'],
  bold: 'fontWeight-bold',
  weight: 'fontWeight',
  outline: ['outline', 'none'],
  textDecoration: ['textDecoration', 'none'],
  decoration: 'textDecoration',
  shadow: 'boxShadow',
  visibility: ['visibility', 'hidden'],
  hidden: 'visibility',
  visible: 'visibility-visible',
  aspectRatio: ['aspectRatio', 'auto'],
  ratio: 'aspectRatio',
  square: 'aspectRatio-1',
  position: ['position', 'static'],
  relative: 'position-relative',
  absolute: 'position-absolute',
  fixed: 'position-fixed',
  sticky: 'position-sticky',
  top: ['top', 0],
  right: ['right', 0],
  bottom: ['bottom', 0],
  left: ['left', 0],
  tp: 'top',
  ri: 'right',
  bt: 'bottom',
  lt: 'left',
  flip: ['transform', 'scale(-1, -1)'],
  flipHorizontal: ['transform', 'scale(-1, 1)'],
  flipVertical: ['transform', 'scale(1, -1)'],
  // Complex properties (dynamically calculated).
  boxShadow: [
    'boxShadow',
    ({ size, color = '#000000AA' }) =>
      `0 ${Math.round(size[0] / 2)}px ${Math.round(size[0] / 2)}px ${Math.round(
        size[0] / 4
      )}px ${color}`,
  ],
  textShadow: [
    'textShadow',
    ({ size, color = 'black' }) => `${size[1]}px ${size[1]}px ${size[1]}px ${color}`,
  ],
  scale: ['transform', ({ size = 0.5 }) => `scale(${size})`],
  scaleY: ['transform', ({ size = 0.5 }) => `scaleY(${size})`],
  innerRadius: [
    'WebkitMaskImage',
    ({ size }) =>
      `radial-gradient(circle ${size[0]}px at 0 0, transparent 0, transparent ${
        size[0] * 2
      }px, black ${size[0] * 2 + 1}px)`,
  ],
})

export const getShortcuts = () => ({
  button: 'outline border',
  link: 'decoration',
  marginX: 'marginLeft-auto marginRight-auto', // Common old way to center items.
  mx: 'marginX',
  code: 'mono bg-lightgray p-3 radius-3',
  borderTopRadius: 'borderTopLeftRadius borderTopRightRadius', // TODO pass value.
  center: 'centerHorizontal centerVertical',
})
